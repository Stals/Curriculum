// Учебный план должен хранить в себе список всех дисциплин и всего такого.
// При создании класса Учебный план - ему передается имя файла с учебным планом после чего он сам загружает его себе в память. 
// Таких учебный планов может быть 5. Или же если они равны можно сделать 1 учебный план и 4 ссылки на него. (Ну или ссылки только в тех которые его копитастят)
// Но только если я буду хранить Учебный план сразу для всех курсов.

#ifndef CURRICULUM_H
#define CURRICULUM_H

#include "curriculumfile.h"
//TODO uncomment after first test
//#include "cycle.h"
#include "subject.h"

class Curriculum{ //TODO ASAP - если я храню только для одного курса- сюда нужно передавать № курса для которого будут доставаться предметы.
public:
	Curriculum(int year, wchar_t* filename);

    // Хранит список предметов из учебного плана.
	std::vector<Subject> subjects; //TODOmb поменять на private, если будет необходимость сделать специфичные методы доступа. (типа получить список предметов только для определенного цикла или получить список циклов. и тп.) 
private:
    struct RowType {
        enum Value {
            cycle,				// цикл предметов
            subject, 			// дисциплина
            subSubject, 		// дисциплина по выбору
            subSubjectNumber, 	// номер дисциплины по выбору (например ГСЭ.В1)
            unknown 			// не одна из выше перечисленных
        };
    };

    int year; // № курса
	CurriculumFile xls; // TODO! освобождать память после того как получу список дисциплин со второго листа и то что нужно с первого (создавать его через new и потом вызвать delete)

	// TODO Question - Хранить сразу для всех курсов или только для 1ого? - мне кажется для 1ого хранить понятнее (и не будет путаницы)
	// TODO Question - как хранить subjects? можно сделать map с ключами - циклами, а value - 2 контейнера (для обязательных и дополнительных дисциплин)

	// Сохраняет Все дисциплины в subjects
	void getSubjects();

	// Добавляет предмет со строки row в subjects
	// При добавлении дополнительной дисциплины нужно передать её номер 
	void getSubject(int row, std::wstring titleNumber = L"");

	// Возвращает RowType в зависимости от того чем является строка
    RowType::Value getRowType(int row);

    // Проверяет входит ли semesterNum в список тех семестров для которых есть аттестация в строке listOfSemesters
    bool isSemesterInList(int year, int semesterNum, std::string listOfSemesters);

    //TODO Тут еще нужен метод который будет получать то что нужно с первого листа.

	//TODO! Можно сделать метод который будет добавлять все под дисциплины после указанной строки,
	// пока не попадется строка которая не является поддисциплиной. 
	// Причем это метод возвращает номер строки на которой закончились поддисциплины - тоесть дальше нужно смотреть от этого места
	// и При всем этом запихивать эти под дисциплины в переданных ему контейнер. (нужно определиться с тем как я храню для курса дисциплины)


    };


#endif
